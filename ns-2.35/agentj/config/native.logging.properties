#native.debug=0
native.debug=6

# NOTE: DO NOT LEAVE SPACES .... C parsing is expecting it. FORMAT must be:
#native.debug=x

#You can use the above variable to set the DEBUG level in the C++ code. Because
#AgentJ goes from C++ (NS-2) to Java then to C++, then the AgentJ debug level
#settings in your Java classes only sets the debugs the native code that get
#tied in via the shared library. For those classes already loaded (e.g.
#protolib and some of AgentJ), you do not get debu commands.  The above command
#allows you to set this debug level manually. You set it to one of the following
#types:

#0; // The FATAL level designates very severe error events that will presumably lead the application to abort.
#1; //The ERROR level designates error events that might still allow the application to continue running.
#2; // The WARN level designates potentially harmful situations.
#3; // The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
#4; // The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
#5; // The TRACE Level designates finer-grained informational events than the DEBUG
#6; // The DETAIL Level designates even finer-grained informational events than the DEBUG
#7; // Turn all comments on
